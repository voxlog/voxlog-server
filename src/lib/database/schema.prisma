generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["fullTextSearch"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId String @id @default(uuid())
  username String @unique @db.VarChar(16)
  email String  @unique @db.VarChar(100)
  birthDate DateTime @db.Date
  password String @db.Char(60)
  
  bio String? @db.VarChar(140)
  realName String? @db.VarChar(128)
  // The maximum length of an URL is 2048 characters.
  profilePictureUrl String? @db.VarChar(2048)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)

  // User range preferences for displaying artists, albums and tracks on their profile.
  artistsRange RangePreference @default(AllTime)
  albumsRange RangePreference @default(AllTime)
  tracksRange RangePreference @default(AllTime)

  scrobbles Scrobble[]
  simpleScrobbles SimpleScrobble[]
  eventsCreated Event[]
  eventsAttending EventAttendee[]
  pictures EventPicture[]

  isAdmin Boolean @default(false)
}

model Artist {
  artistId String @id @default(uuid())

  // Save artist name for fast retrieval.
  name String @db.VarChar(256)

  // Artist picture
  picUrl String? @db.VarChar(2048)

  // About MusicBrainz and Spotify IDs: none of them are really optional,
  // but only one of them is required (not both), so we can't make them
  // required. Thus, we set them as optional.

  // MusicBrainz Artist ID
  mbId String? @unique @db.VarChar(36)

  // Spotify Artist ID
  spId String? @unique @db.VarChar(22)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  
  albums Album[]
  events EventArtist[]
}

model Album {
  albumId String @id @default(uuid())

  artistId String

  // Save album title for fast retrieval.
  title String @db.VarChar(512)
  
  coverArtUrl String? @db.VarChar(2048)

  // MusicBrainz Release ID
  mbId String? @unique @db.VarChar(36)

  // Spotify Album ID
  spId String? @unique @db.VarChar(22)
  
  tracks Track[]
  
  fromArtist Artist @relation(fields: [artistId], references: [artistId])
}

model Track {
  trackId String @id @default(uuid())

  albumId String

  // Save track title for fast retrieval.
  title String @db.VarChar(512)

  // Spotify Track ID.
  spId String? @unique @db.VarChar(22)
  // MusicBrainz Recording ID.
  // Needs to be coupled with a MusicBrainz Release ID for accuracy.
  // That's stored in the album though.
  mbId String? @unique @db.VarChar(36)

  // Track duration in seconds.
  duration Int @db.Integer
  
  scrobbles Scrobble[]

  fromAlbum Album @relation(fields: [albumId], references: [albumId])
}

model Scrobble {
  scrobbleId String @id @default(uuid())
  // Who scrobbled.
  userId String
  user User @relation(fields: [userId], references: [userId])

  // When was it scrobbled.
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // What was scrobbled.
  trackId String
  track Track @relation(fields: [trackId], references: [trackId])
}

model SimpleScrobble {
  scrobbleId String @id @default(uuid())
  // Who scrobbled.
  userId String
  user User @relation(fields: [userId], references: [userId])

  // When was it scrobbled.
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // What was scrobbled.
  trackTitle String @db.VarChar(512)
  artistName String @db.VarChar(256)
  duration Int @db.Integer
}

model Event {
  eventId String @id @default(uuid())

  // Event name.
  name String @db.VarChar(128)
  // Event description.
  description String @db.VarChar(2048)

  // Event URL (tickets, information, etc.)
  url String? @db.VarChar(2048)

  // Event image.
  imageUrl String? @db.VarChar(2048)
  
  // Event location.
  // OpenStreetMap lat/lon.
  lat Float @db.Real
  lon Float @db.Real

  // Event start and end date and time.
  startTime DateTime @db.Timestamp(0)
  endTime DateTime @db.Timestamp(0)

  // Event creator.
  creatorId String
  creator User @relation(fields: [creatorId], references: [userId])
  
  attendees EventAttendee[]
  artists EventArtist[]
  pictures EventPicture[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)
}

// SQL Relation table for many-to-many relationship between events and users.
// This is, a relation for who will attend an event.
model EventAttendee {
  eventId String
  event Event @relation(fields: [eventId], references: [eventId])
  userId String
  user User @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)

  @@id([eventId, userId])
}

// Relation for artists that will play at an event.
model EventArtist {
  eventId String
  event Event @relation(fields: [eventId], references: [eventId])
  artistId String
  artist Artist @relation(fields: [artistId], references: [artistId])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)

  @@id([eventId, artistId])
}

// Photos taken at an event. Uploaded by users.
model EventPicture {
  pictureId String @id @default(uuid())
  eventId String
  event Event @relation(fields: [eventId], references: [eventId])

  // Picture URL.
  url String @db.VarChar(2048)

  // Picture description.
  description String? @db.VarChar(256)

  // Uploader
  uploaderId String
  uploader User @relation(fields: [uploaderId], references: [userId])

  createdAt DateTime @default(now()) @db.Timestamp(0)
}

// User range preferences for displaying artists, albums and tracks on their profile.
enum RangePreference {
  Week
  Month
  Quarter
  HalfYear
  Year
  AllTime
}
